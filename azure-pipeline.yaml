# trigger: master

pr: none

pool:
  vmImage: 'ubuntu-latest'


parameters:
  - name: resourceGroup
    displayName: Resource Group
    type: string
    default: 'rg-eastus-terraform-02'
    values:
    - rg-eastus-terraform-02
    - rg-eastus-terraform-01
  - name: networkname
    displayName: Virtual Network Name
    type: string
    default: virtualnet-eastus-01
    values:
    - virtualnet-eastus-01
    - virtualnet-eastus-02
  - name: vmSize
    displayName: Virtual Machine Size
    type: string
    default: "Standard_F2"
    values:
      - "Standard_F2"
      - "Standard_F1"
  - name: vmName
    displayName: Virtual Machine Size
    type: string
    default: "vm-eastus-01"
    values:
      - "vm-eastus-01"
      - "vm-eastus-02"

name: my-test-job

stages :
  - stage: initvalidate
    jobs:
    - job: Teraform_init
      displayName: Terraform init
      steps:
        - task: AzureCLI@2
          inputs:
           azureSubscription: 'Azure subscription 1 $(terraform-subscription)'
           scriptType: 'bash'
           scriptLocation: 'inlineScript'
           inlineScript: |
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId          
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)
           addSpnToEnvironment: true
           useGlobalConfig: true
           failOnStandardError: true 
           workingDirectory: $(System.DefaultWorkingDirectory)/resources/

        - task: TerraformInstaller@0
          inputs:
           terraformVersion: 'latest'
  
        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'
           backendServiceArm: 'Azure subscription 1 $(terraform-subscription)'
           backendAzureRmResourceGroupName: 'rg-test-eastus-01'
           backendAzureRmStorageAccountName: 'stgtesteastus01'
           backendAzureRmContainerName: 'tfstate'
           backendAzureRmKey: 'terraform.tfstate'

        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'validate'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'

  - stage: initplan        
    dependsOn: [initvalidate]
    condition: succeeded('initvalidate')
    jobs:
      - job: terraform_plan
        steps:
        - task: TerraformInstaller@0
          inputs:
           terraformVersion: 'latest'
        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'
           backendServiceArm: 'Azure subscription 1 $(terraform-subscription)'
           backendAzureRmResourceGroupName: 'rg-test-eastus-01'
           backendAzureRmStorageAccountName: 'stgtesteastus01'
           backendAzureRmContainerName: 'tfstate'
           backendAzureRmKey: 'terraform.tfstate'

        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'plan'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'
           commandOptions: '-input=true -var=${{ parameters.resourceGroup }} -var=${{ parameters.networkname }}'
           backendServiceArm: 'Azure subscription 1 $(terraform-subscription)'
           backendAzureRmResourceGroupName: 'rg-test-eastus-01'
           backendAzureRmStorageAccountName: 'stgtesteastus01'
           backendAzureRmContainerName: 'tfstate'
           backendAzureRmKey: 'terraform.tfstate'

  - stage: initplan
    dependsOn: [initplan]
    condition: succeeded('iinitplan')
    jobs:
      - job: terraform_apply
        steps:
        - task: TerraformInstaller@0
          inputs:
           terraformVersion: 'latest'
        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'
           backendServiceArm: 'Azure subscription 1 $(terraform-subscription)'
           backendAzureRmResourceGroupName: 'rg-test-eastus-01'
           backendAzureRmStorageAccountName: 'stgtesteastus01'
           backendAzureRmContainerName: 'tfstate'
           backendAzureRmKey: 'terraform.tfstate'
        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'plan'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'
           commandOptions: '-input=true -var=${{ parameters.resourceGroup }} -var=${{ parameters.networkname }} -var=${{ parameters.vmName }} -var=${{ parameters.vmSize }}'
           backendServiceArm: 'Azure subscription 1 $(terraform-subscription)'
           backendAzureRmResourceGroupName: 'rg-test-eastus-01'
           backendAzureRmStorageAccountName: 'stgtesteastus01'
           backendAzureRmContainerName: 'tfstate'
           backendAzureRmKey: 'terraform.tfstate'

        - task: TerraformTaskV2@2
          inputs:
           provider: 'azurerm'
           command: 'apply'
           workingDirectory: '$(System.DefaultWorkingDirectory)/resources/'
           commandOptions: '-input=true -auto-approve -var=${{ parameters.resourceGroup }} -var=${{ parameters.networkname }} -var=${{ parameters.vmName }} -var=${{ parameters.vmSize }}'
           backendServiceArm: 'Azure subscription 1 $(terraform-subscription)'
           backendAzureRmResourceGroupName: 'rg-test-eastus-01'
           backendAzureRmStorageAccountName: 'stgtesteastus01'
           backendAzureRmContainerName: 'tfstate'
           backendAzureRmKey: 'terraform.tfstate'